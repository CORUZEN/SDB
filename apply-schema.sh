#!/bin/bash

# Script para aplicar o schema multi-tenant no banco Neon
# FRIAXIS v4.0.0 - Database Setup

set -e  # Exit on any error

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ FRIAXIS v4.0.0 - Aplicando Schema Multi-tenant${NC}"
echo "=================================================="

# Verificar se as vari√°veis de ambiente est√£o configuradas
if [ -z "$DATABASE_URL" ]; then
    echo -e "${RED}‚ùå Erro: DATABASE_URL n√£o configurada${NC}"
    echo "Configure a vari√°vel DATABASE_URL com a connection string do Neon"
    exit 1
fi

echo -e "${BLUE}üìã Checklist de Aplica√ß√£o do Schema:${NC}"
echo "1. ‚úÖ Backup autom√°tico dos dados existentes"
echo "2. ‚úÖ Aplica√ß√£o do schema multi-tenant"
echo "3. ‚úÖ Execu√ß√£o da migra√ß√£o de dados"
echo "4. ‚úÖ Valida√ß√£o da integridade"
echo "5. ‚úÖ Configura√ß√£o de RLS"
echo ""

# Fun√ß√£o para executar SQL e verificar resultado
execute_sql() {
    local sql_file=$1
    local description=$2
    
    echo -e "${YELLOW}‚è≥ $description...${NC}"
    
    if psql "$DATABASE_URL" -f "$sql_file" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ $description - Conclu√≠do${NC}"
    else
        echo -e "${RED}‚ùå $description - Falhou${NC}"
        echo "Verifique o arquivo de log para detalhes do erro"
        exit 1
    fi
}

# Fun√ß√£o para verificar conex√£o com o banco
check_connection() {
    echo -e "${YELLOW}‚è≥ Verificando conex√£o com o banco...${NC}"
    
    if psql "$DATABASE_URL" -c "SELECT version();" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Conex√£o com banco estabelecida${NC}"
    else
        echo -e "${RED}‚ùå Erro ao conectar com o banco${NC}"
        echo "Verifique se o DATABASE_URL est√° correto e o banco est√° acess√≠vel"
        exit 1
    fi
}

# Fun√ß√£o para criar backup
create_backup() {
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="backup_before_multitenant_$timestamp.sql"
    
    echo -e "${YELLOW}‚è≥ Criando backup dos dados existentes...${NC}"
    
    if pg_dump "$DATABASE_URL" > "$backup_file" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Backup criado: $backup_file${NC}"
        echo -e "${BLUE}üí° Mantenha este backup seguro para poss√≠vel rollback${NC}"
    else
        echo -e "${RED}‚ùå Falha ao criar backup${NC}"
        read -p "Deseja continuar sem backup? (y/N): " continue_without_backup
        if [[ ! $continue_without_backup =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Fun√ß√£o para validar aplica√ß√£o
validate_schema() {
    echo -e "${YELLOW}‚è≥ Validando schema aplicado...${NC}"
    
    # Verificar se as tabelas principais foram criadas
    local tables=("organizations" "users" "organization_members" "devices" "device_telemetry" "policies" "commands" "events" "alerts")
    
    for table in "${tables[@]}"; do
        if psql "$DATABASE_URL" -c "SELECT 1 FROM $table LIMIT 1;" > /dev/null 2>&1; then
            echo -e "${GREEN}  ‚úÖ Tabela $table criada com sucesso${NC}"
        else
            echo -e "${RED}  ‚ùå Erro na tabela $table${NC}"
        fi
    done
    
    # Verificar RLS
    echo -e "${YELLOW}‚è≥ Verificando Row Level Security...${NC}"
    local rls_tables=("devices" "device_telemetry" "policies" "commands" "events" "alerts")
    
    for table in "${rls_tables[@]}"; do
        local rls_enabled=$(psql "$DATABASE_URL" -t -c "SELECT relrowsecurity FROM pg_class WHERE relname = '$table';" | xargs)
        if [ "$rls_enabled" = "t" ]; then
            echo -e "${GREEN}  ‚úÖ RLS habilitado em $table${NC}"
        else
            echo -e "${YELLOW}  ‚ö†Ô∏è  RLS n√£o encontrado em $table${NC}"
        fi
    done
}

# Script principal
main() {
    echo -e "${BLUE}üîç Iniciando aplica√ß√£o do schema...${NC}"
    
    # 1. Verificar conex√£o
    check_connection
    
    # 2. Criar backup
    create_backup
    
    # 3. Aplicar schema multi-tenant
    if [ -f "infra/schema-multi-tenant.sql" ]; then
        execute_sql "infra/schema-multi-tenant.sql" "Aplicando schema multi-tenant"
    else
        echo -e "${RED}‚ùå Arquivo schema-multi-tenant.sql n√£o encontrado${NC}"
        exit 1
    fi
    
    # 4. Executar migra√ß√£o de dados
    if [ -f "infra/migrations/004_multi_tenant_migration.sql" ]; then
        execute_sql "infra/migrations/004_multi_tenant_migration.sql" "Executando migra√ß√£o de dados"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Arquivo de migra√ß√£o n√£o encontrado, pulando...${NC}"
    fi
    
    # 5. Validar aplica√ß√£o
    validate_schema
    
    # 6. Aplicar dados de seed (opcional)
    if [ -f "infra/seeds-multi-tenant.sql" ]; then
        read -p "Deseja aplicar dados de exemplo? (y/N): " apply_seeds
        if [[ $apply_seeds =~ ^[Yy]$ ]]; then
            execute_sql "infra/seeds-multi-tenant.sql" "Aplicando dados de exemplo"
        fi
    fi
    
    echo ""
    echo -e "${GREEN}üéâ Schema multi-tenant aplicado com sucesso!${NC}"
    echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
    echo "1. Configurar vari√°veis de ambiente da aplica√ß√£o"
    echo "2. Atualizar connection strings nas APIs"
    echo "3. Testar isolamento de dados entre organiza√ß√µes"
    echo "4. Executar testes de valida√ß√£o"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Importante:${NC} Teste o sistema em ambiente de desenvolvimento antes de aplicar em produ√ß√£o"
}

# Executar script principal
main "$@"