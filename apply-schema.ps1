# Script PowerShell para aplicar o schema multi-tenant no banco Neon
# FRIAXIS v4.0.0 - Database Setup

param(
    [switch]$Force,
    [switch]$SkipBackup,
    [string]$DatabaseUrl = $env:DATABASE_URL
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"

# Cores para output
$Colors = @{
    Red = "Red"
    Green = "Green"
    Blue = "Cyan"
    Yellow = "Yellow"
    White = "White"
}

function Write-ColorText {
    param($Text, $Color = "White")
    Write-Host $Text -ForegroundColor $Colors[$Color]
}

function Write-Header {
    Write-ColorText "üöÄ FRIAXIS v4.0.0 - Aplicando Schema Multi-tenant" "Blue"
    Write-ColorText "==================================================" "Blue"
    Write-Host ""
}

function Test-DatabaseConnection {
    Write-ColorText "‚è≥ Verificando conex√£o com o banco..." "Yellow"
    
    if (-not $DatabaseUrl) {
        Write-ColorText "‚ùå Erro: DATABASE_URL n√£o configurada" "Red"
        Write-ColorText "Configure a vari√°vel DATABASE_URL com a connection string do Neon" "White"
        exit 1
    }
    
    try {
        # Testar conex√£o usando psql
        $testQuery = "SELECT version();"
        $result = & psql $DatabaseUrl -c $testQuery 2>$null
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorText "‚úÖ Conex√£o com banco estabelecida" "Green"
            return $true
        }
    }
    catch {
        Write-ColorText "‚ùå Erro ao conectar com o banco" "Red"
        Write-ColorText "Verifique se o DATABASE_URL est√° correto e o banco est√° acess√≠vel" "White"
        Write-ColorText "Erro: $($_.Exception.Message)" "Red"
        exit 1
    }
}

function New-DatabaseBackup {
    if ($SkipBackup) {
        Write-ColorText "‚ö†Ô∏è Pulando backup (SkipBackup especificado)" "Yellow"
        return
    }
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupFile = "backup_before_multitenant_$timestamp.sql"
    
    Write-ColorText "‚è≥ Criando backup dos dados existentes..." "Yellow"
    
    try {
        & pg_dump $DatabaseUrl > $backupFile
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorText "‚úÖ Backup criado: $backupFile" "Green"
            Write-ColorText "üí° Mantenha este backup seguro para poss√≠vel rollback" "Blue"
        }
        else {
            Write-ColorText "‚ùå Falha ao criar backup" "Red"
            
            if (-not $Force) {
                $continue = Read-Host "Deseja continuar sem backup? (y/N)"
                if ($continue -notmatch "^[Yy]$") {
                    exit 1
                }
            }
        }
    }
    catch {
        Write-ColorText "‚ùå Erro ao criar backup: $($_.Exception.Message)" "Red"
        if (-not $Force) {
            exit 1
        }
    }
}

function Invoke-SqlFile {
    param($FilePath, $Description)
    
    Write-ColorText "‚è≥ $Description..." "Yellow"
    
    if (-not (Test-Path $FilePath)) {
        Write-ColorText "‚ùå Arquivo n√£o encontrado: $FilePath" "Red"
        return $false
    }
    
    try {
        & psql $DatabaseUrl -f $FilePath > $null 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorText "‚úÖ $Description - Conclu√≠do" "Green"
            return $true
        }
        else {
            Write-ColorText "‚ùå $Description - Falhou" "Red"
            return $false
        }
    }
    catch {
        Write-ColorText "‚ùå $Description - Erro: $($_.Exception.Message)" "Red"
        return $false
    }
}

function Test-SchemaValidation {
    Write-ColorText "‚è≥ Validando schema aplicado..." "Yellow"
    
    # Verificar tabelas principais
    $tables = @("organizations", "users", "organization_members", "devices", "device_telemetry", "policies", "commands", "events", "alerts")
    
    foreach ($table in $tables) {
        try {
            & psql $DatabaseUrl -c "SELECT 1 FROM $table LIMIT 1;" > $null 2>&1
            
            if ($LASTEXITCODE -eq 0) {
                Write-ColorText "  ‚úÖ Tabela $table criada com sucesso" "Green"
            }
            else {
                Write-ColorText "  ‚ùå Erro na tabela $table" "Red"
            }
        }
        catch {
            Write-ColorText "  ‚ùå Erro ao verificar tabela $table" "Red"
        }
    }
    
    # Verificar RLS
    Write-ColorText "‚è≥ Verificando Row Level Security..." "Yellow"
    $rlsTables = @("devices", "device_telemetry", "policies", "commands", "events", "alerts")
    
    foreach ($table in $rlsTables) {
        try {
            $query = "SELECT relrowsecurity FROM pg_class WHERE relname = '$table';"
            $result = & psql $DatabaseUrl -t -c $query | ForEach-Object { $_.Trim() }
            
            if ($result -eq "t") {
                Write-ColorText "  ‚úÖ RLS habilitado em $table" "Green"
            }
            else {
                Write-ColorText "  ‚ö†Ô∏è RLS n√£o encontrado em $table" "Yellow"
            }
        }
        catch {
            Write-ColorText "  ‚ùå Erro ao verificar RLS em $table" "Red"
        }
    }
}

function Show-PostInstallInfo {
    Write-Host ""
    Write-ColorText "üéâ Schema multi-tenant aplicado com sucesso!" "Green"
    Write-ColorText "üìã Pr√≥ximos passos:" "Blue"
    Write-Host "1. Configurar vari√°veis de ambiente da aplica√ß√£o"
    Write-Host "2. Atualizar connection strings nas APIs"
    Write-Host "3. Testar isolamento de dados entre organiza√ß√µes"
    Write-Host "4. Executar testes de valida√ß√£o"
    Write-Host ""
    Write-ColorText "‚ö†Ô∏è Importante: Teste o sistema em ambiente de desenvolvimento antes de aplicar em produ√ß√£o" "Yellow"
}

# Script principal
function Main {
    Write-Header
    
    Write-ColorText "üìã Checklist de Aplica√ß√£o do Schema:" "Blue"
    Write-Host "1. ‚úÖ Backup autom√°tico dos dados existentes"
    Write-Host "2. ‚úÖ Aplica√ß√£o do schema multi-tenant"
    Write-Host "3. ‚úÖ Execu√ß√£o da migra√ß√£o de dados"
    Write-Host "4. ‚úÖ Valida√ß√£o da integridade"
    Write-Host "5. ‚úÖ Configura√ß√£o de RLS"
    Write-Host ""
    
    # 1. Verificar conex√£o
    Test-DatabaseConnection
    
    # 2. Criar backup
    New-DatabaseBackup
    
    # 3. Aplicar schema multi-tenant
    $schemaApplied = Invoke-SqlFile "infra/schema-multi-tenant.sql" "Aplicando schema multi-tenant"
    if (-not $schemaApplied) {
        Write-ColorText "‚ùå Falha ao aplicar schema. Abortando." "Red"
        exit 1
    }
    
    # 4. Executar migra√ß√£o de dados
    if (Test-Path "infra/migrations/004_multi_tenant_migration.sql") {
        $migrationApplied = Invoke-SqlFile "infra/migrations/004_multi_tenant_migration.sql" "Executando migra√ß√£o de dados"
        if (-not $migrationApplied) {
            Write-ColorText "‚ö†Ô∏è Migra√ß√£o de dados falhou, mas schema foi aplicado" "Yellow"
        }
    }
    else {
        Write-ColorText "‚ö†Ô∏è Arquivo de migra√ß√£o n√£o encontrado, pulando..." "Yellow"
    }
    
    # 5. Validar aplica√ß√£o
    Test-SchemaValidation
    
    # 6. Aplicar dados de seed (opcional)
    if (Test-Path "infra/seeds-multi-tenant.sql") {
        $applySeeds = Read-Host "Deseja aplicar dados de exemplo? (y/N)"
        if ($applySeeds -match "^[Yy]$") {
            Invoke-SqlFile "infra/seeds-multi-tenant.sql" "Aplicando dados de exemplo"
        }
    }
    
    # 7. Mostrar informa√ß√µes finais
    Show-PostInstallInfo
}

# Verificar se psql est√° dispon√≠vel
if (-not (Get-Command psql -ErrorAction SilentlyContinue)) {
    Write-ColorText "‚ùå psql n√£o encontrado. Instale o PostgreSQL client." "Red"
    Write-ColorText "Download: https://www.postgresql.org/download/windows/" "White"
    exit 1
}

if (-not (Get-Command pg_dump -ErrorAction SilentlyContinue)) {
    Write-ColorText "‚ùå pg_dump n√£o encontrado. Instale o PostgreSQL client." "Red"
    exit 1
}

# Executar script principal
Main